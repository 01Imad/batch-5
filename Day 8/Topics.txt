npx create-react-app foldername

React without jsx:
    class Hello extends React.Component {
        render() {
            return <div>Hello {this.props.toWhat}</div>;
        }
    }

    ReactDOM.render(
        <Hello toWhat="World" />,
        document.getElementById('root')
    );

    class Hello extends React.Component {
        render() {
            return React.createElement('div', null, `Hello ${this.props.toWhat}`);
        }
    }

    ReactDOM.render(
        React.createElement(Hello, {toWhat: 'World'}, null),
        document.getElementById('root')
    );

Creating Create react using CRA:
    npx install create-react-app

props.children:
==============
    The children, in React, refer to the generic box whose contents are 
    unknown until they’re passed from the parent component.

State:
    React components has a built-in state object. The state object is where you store 
    property values that belongs to the component.

    state = {

    }

Event handlers in react js:
==========================
Updating State:
==============
    We update a components state using setState method.

    Syntax:
    ======
        setState({
            ...newValues
        })
Functional Components:
=====================
    // CLASS COMPONENT
    class ReactHeader extends React.Component {
        render() {
            return (
            <h1>
                React {this.props.version || 16} Documentation
            </h1>
            )
        }
    }


    // FUNCTIONAL COMPONENT
    function ReactHeader(props) {
        return (
            <h1>
            React {props.version || 16} Documentation
            </h1>
        )
    }

Lifting State in React:
======================
    In React, sharing state is accomplished by moving it to the 
    closest common ancestor of the components that need it. 
    This is called “lifting state up”. 

    